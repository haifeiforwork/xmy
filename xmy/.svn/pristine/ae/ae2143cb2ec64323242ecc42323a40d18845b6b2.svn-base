package com.zfj.xmy.common.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.xiaoleilu.hutool.date.DateUtil;
import com.xiaoleilu.hutool.util.ObjectUtil;
import com.xiaoleilu.hutool.util.RandomUtil;
import com.zfj.base.commons.mini.BaseService;
import com.zfj.base.exception.BusinessException;
import com.zfj.base.util.common.StringUtil;
import com.zfj.xmy.common.persistence.dao.JiguangPushRecordMapper;
import com.zfj.xmy.common.persistence.dao.UserMapper;
import com.zfj.xmy.common.persistence.pojo.JiguangPushRecord;
import com.zfj.xmy.common.persistence.pojo.User;
import com.zfj.xmy.common.service.CommonPushUtilService;
import com.zfj.xmy.quartz.QuartzManager;
import com.zfj.xmy.quartz.dto.PushReturnDto;
import com.zfj.xmy.quartz.job.JiguangPushQuartz;
import com.zfj.xmy.util.PushUtil;

@Service
public class CommonPushUtilServiceImpl extends BaseService implements CommonPushUtilService {

	@Autowired
	private JiguangPushRecordMapper jiguangPushRecordMapper;
	
	
	
	@Autowired
	private QuartzManager quartzManager;
	
	@Autowired
	private UserMapper userMapper;
	
	/**
	 * 推送任务组标记
	 */
	public static final String PUSH_JOB_GROUP = "PUSH_JOB_GROUP"; 
	/**
	 * 推送触发器组标记
	 */
	public static final String PUSH_TRIGGER_GROUP = "PUSH_TRIGGER_GROUP"; 
	
	
	
	@Override
	public void testme() {
		
		//System.out.println("is test me .....");
	}
	
	
	@Override
	@Transactional(rollbackFor=Exception.class)
    public void Push(String msg) {
		//推送
		String result = PushUtil.sendBroadcasts(msg);
		//记录
		JiguangPushRecord jiguangPushRecord = new JiguangPushRecord();
		jiguangPushRecord.setContent(msg);
		jiguangPushRecord.setCreateTimestamp(DateUtil.date());
		jiguangPushRecord.setResult(result);
		jiguangPushRecordMapper.insertSelective(jiguangPushRecord);
		//System.out.println("is test me .....");
	}
    
	@Override
	public void addPush(String msg,Date date) {
		
		if (StringUtil.isEmpty(msg)) {
			throw new BusinessException("推送信息不能为空");
		}
		if (ObjectUtil.isNull(date)) {
			throw new BusinessException("推送时间不能为空");
		}
		if (date.before(DateUtil.date())) {
			throw new BusinessException("推送时间必须大于当前时间");
		}
		Map<String, Object> extData = new HashMap<String, Object>();
		extData.put("msg", msg); //推送信息
		quartzManager.addJob(RandomUtil.randomUUID(), CommonPushUtilServiceImpl.PUSH_JOB_GROUP, RandomUtil.randomUUID(), CommonPushUtilServiceImpl.PUSH_TRIGGER_GROUP, JiguangPushQuartz.class, date, extData);
		//System.out.println("is test me .....");
	}
	
	@Override
	public List<PushReturnDto> queryAllPush() {
		List<PushReturnDto> pushReturns = quartzManager.queryAllPush();
		for (PushReturnDto pushReturnDto : pushReturns) {
			System.out.println(pushReturnDto.getJobName());
			System.out.println(pushReturnDto.getExtData());
			System.out.println(pushReturnDto.getTime());
		}
		return pushReturns;
	}
	
	@Override
	public void delPush(String jobName,String triggerName) {
		quartzManager.removeJob(jobName, CommonPushUtilServiceImpl.PUSH_JOB_GROUP, triggerName, CommonPushUtilServiceImpl.PUSH_TRIGGER_GROUP);
		//quartzManager.addJob(RandomUtil.randomUUID(), "push", RandomUtil.randomUUID(), "push", JiguangPushQuartz.class, date, extData);
		//System.out.println("is test me .....");
	}
	
	/**
	 * 推送给用户
	 * @param userId
	 * @param msg
	 * @Description 
	 * @date 2017年12月25日  下午3:34:16
	 * @author wy
	 * 2017
	 * @return void
	 */
	@Override
	@Transactional(rollbackFor=Exception.class)
    public void Push(Long userId,String msg) {
		//推送
		User user = userMapper.selectByPrimaryKey(userId);
		if (ObjectUtil.isNull(user)) {
			throw new  BusinessException("用户不存在");
		}
		String result = PushUtil.sendToUserByToken(user.getAppToken(), msg);
		//记录
		JiguangPushRecord jiguangPushRecord = new JiguangPushRecord();
		jiguangPushRecord.setContent(msg);
		jiguangPushRecord.setUserId(userId+"");
		jiguangPushRecord.setCreateTimestamp(DateUtil.date());
		jiguangPushRecord.setResult(result);
		jiguangPushRecordMapper.insertSelective(jiguangPushRecord);
		//System.out.println("is test me .....");
	}
	
}
