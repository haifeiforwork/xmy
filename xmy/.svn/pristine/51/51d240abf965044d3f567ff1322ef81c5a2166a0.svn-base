package com.zfj.xmy.wap.web.controller.mine;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zfj.base.commons.mini.bean.RespData;
import com.zfj.xmy.activity.persistence.app.pojo.dto.CouponSearchInDto;
import com.zfj.xmy.activity.persistence.app.pojo.dto.coupon.GetAvailbleCouponOutDto;
import com.zfj.xmy.activity.service.cms.CouponService;
import com.zfj.xmy.common.ReqData;
import com.zfj.xmy.common.SystemConstant;
import com.zfj.xmy.common.persistence.pojo.Coupon;
import com.zfj.xmy.common.persistence.pojo.CouponUser;
import com.zfj.xmy.common.persistence.pojo.EntityCoupon;
import com.zfj.xmy.common.persistence.pojo.MsgPushInfo;
import com.zfj.xmy.common.persistence.pojo.ShoppingCard;
import com.zfj.xmy.common.persistence.pojo.User;
import com.zfj.xmy.common.persistence.pojo.UserAddrees;
import com.zfj.xmy.common.persistence.pojo.UserInfo;
import com.zfj.xmy.goods.service.wap.WapShoppingCardService;
import com.zfj.xmy.order.service.pc.PcOrderService;
import com.zfj.xmy.order.service.wap.WapOrderService;
import com.zfj.xmy.user.service.common.UserService;
import com.zfj.xmy.user.service.wap.WapAddressService;
import com.zfj.xmy.user.service.wap.WapSmsLogService;
import com.zfj.xmy.user.service.wap.WapUserService;
import com.zfj.xmy.wap.web.common.AjaxResult;
import com.zfj.xmy.wap.web.common.SessionInfo;
import com.zfj.xmy.wap.web.common.SessionUtils;
import com.zfj.xmy.wap.web.controller.BaseController;

@Controller
@RequestMapping("/mine")
public class MineController extends BaseController{
	
	@Autowired
	private WapUserService wapUserService;
	@Autowired
	private WapSmsLogService wapSmsLogService;
	@Autowired
	private WapAddressService wapAddressService;
	@Autowired
	private PcOrderService orderService;
	@Autowired
	private CouponService couponService;
	@Autowired
	private UserService userService;
	@Autowired
	private WapShoppingCardService wapShoppingCardService;
	@Autowired
	private WapOrderService wapOrderService;
	
	
	/**优惠券页面*/
	private final static String COUPON = "mine/coupon";
	/**优惠券列表页面*/
	private final static String COUPON_LIST = "mine/coupon_list";
	/**消息页面*/
	private final static String MESSAGE = "mine/message";
	/**消息详情页面*/
	private final static String MESSAGE_INFO = "mine/message_info";
	/**购物卡激活*/
	private final static String SHOPPING_CARD="mine/shoppingCard";
	/**
	 *@author mu
	 * @param model
	 * @return 返回个人中心
	 */
	@RequestMapping("/center")
	public String toCenter(ModelMap model,HttpServletRequest request) {
		
//		SessionInfo sessionInfo = SessionInfo.get();
//		System.out.println("我的用户名ID"+sessionInfo.getUser().getId());
//		
//		Integer unpaidCount1 = orderService.findUnpaidOrderCount(sessionInfo.getUser().getId(),1);
//		Integer unpaidCount2 = orderService.findUnpaidOrderCount(sessionInfo.getUser().getId(),3);
//		Integer unpaidCount3 = orderService.findUnpaidOrderCount(sessionInfo.getUser().getId(),4);
//		request.setAttribute("unpaidCount1", unpaidCount1);
//		request.setAttribute("unpaidCount2", unpaidCount2);
//		request.setAttribute("unpaidCount3", unpaidCount3);
		
		return "redirect:/gotoPage/mine/center";
	}
	
	@RequestMapping("getUnpaidCount/{num}")
	@ResponseBody
	public AjaxResult getUnpaidCount(HttpServletRequest req, @PathVariable("num") Integer num) {
		Object count = 0;
		switch(num) {
		case 1 :
			count = orderService.findUnpaidOrderCount(SessionUtils.getUser(req).getId(), 1);
			break;
		case 2 :
			count = orderService.findUnpaidOrderCount(SessionUtils.getUser(req).getId(), 3);
			break;
		case 3 : 
			count = orderService.findUnpaidOrderCount(SessionUtils.getUser(req).getId(), 4);
			break;
		case 4 : 
			count = userService.findNotReadMsgInfo(SessionUtils.getUser(req).getId()).size();
			break;
		case 5 : 
			count = wapOrderService.getUserBalance(SessionUtils.getUser(req).getId()).doubleValue();
			break;
		}
		return new AjaxResult(1, null, count);
	}
	
	@RequestMapping("/changeAvatar")
	@ResponseBody
	public AjaxResult change(HttpServletRequest req, String imgPatho) {
		SessionInfo sessionInfo = SessionInfo.get();
		String imgWap = imgPatho ;
		try {
			imgWap = imgWap.replaceAll("resource/commons", "resources/common");
			UserInfo userInfo = sessionInfo.getUserInfo();
			userInfo.setAvatar(imgPatho);
			Integer result = wapUserService.updateUserInfo(userInfo);
			sessionInfo.getUserInfo().setAvatar(imgWap);
			req.getSession().setAttribute("wap_session", sessionInfo);
			return new AjaxResult(result, null, null);
		} catch(NullPointerException e) {
			return new AjaxResult(0, "未登录", null);
		}
	}
	
	/**
	 *@author mu
	 * @param model
	 * @return 返回设置页面
	 */
	@RequestMapping("/setting")
	public String toSetting(ModelMap model) {
		return "redirect:/gotoPage/mine/setting";
	}
	
	@RequestMapping("/message")
	public String message() {
		return null;
	}
	
	@RequestMapping("/account")
	public String account() {
		return "redirect:/gotoPage/mine/account";
	}
	
	@RequestMapping("/accountSecurity")
	public String accountSecurity() {
		return "redirect:/gotoPage/mine/accountSecurity";
	}
	
	/**
	 *@author mu
	 * @param model
	 * @return 返回地址页面
	 */
	@RequestMapping("/address")
	public String toAddress(HttpServletRequest req, HttpServletResponse res, ModelMap model) {
		SessionInfo session = SessionUtils.getAttr(req, res, SessionInfo.class, "wap_session");
		List<UserAddrees> addressList = session.getUserAddress();
		User user = session.getUser();
		addressList = wapUserService.queryAddress(user);
		setWapSessionInfo(addressList);
		return "redirect:/gotoPage/mine/address";
	}
	
	@RequestMapping("/editAddress")
	public String toEditAddress(Long addressId, ModelMap model) {
		UserAddrees addr = wapAddressService.getAddress(addressId);
		model.addAttribute("addr", addr);
		return "forward:/gotoPage/mine/editAddress";
	}
	
	
	/**
	 *@author mu
	 * @param model
	 * @return 返回修改地址页面
	 */
	@RequestMapping("/address/edit")
	@ResponseBody
	public AjaxResult EditAddress(UserAddrees addr, HttpServletRequest req, HttpServletResponse res) {
		int result = wapAddressService.updateAddress(addr);
		if(result == -1) {
			return new AjaxResult(-1, "请输入完整的信息", null);
		}
		if(result == 1) {
			this.reSetUserAddress(req.getSession());
		}
		return new AjaxResult(result, null, null);
	}
	
	public void reSetUserAddress(HttpSession session) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute("wap_session");
		User user = sessionInfo.getUser();
		List<UserAddrees> queryAddress = wapUserService.queryAddress(user);
		sessionInfo.setUserAddress(queryAddress);
		session.setAttribute("wap_session", sessionInfo);
	}
	
	@RequestMapping("/address/setDefault")
	@ResponseBody
	public AjaxResult setDefault(HttpServletRequest req, HttpServletResponse res, Long id) {
		Integer result = wapAddressService.updateDefault(id);
		if(result == 1) {
			this.reSetUserAddress(req.getSession());
		}
		return new AjaxResult(result, null, null);
	}
	
	@RequestMapping("/addAddress")
	public String toAddAddress() {
		return "redirect:/gotoPage/mine/addAddress";
	}
	
	@RequestMapping("/address/add")
	@ResponseBody
	public AjaxResult addAddress(UserAddrees addr, HttpServletRequest req, HttpServletResponse res) {
		List<UserAddrees> userAddress = SessionUtils.getUserAddress(req);
		if(userAddress.size() == 0) {
			addr.setIsDefault(0);
		}
		int result = wapAddressService.add(addr);
		if(result == -1) {
			return new AjaxResult(-1, "请输入完整的信息", null);
		}
		if(result == 1) {
			this.reSetUserAddress(req.getSession());
		}
		return new AjaxResult(result, null, null);
	}
	
	@RequestMapping("/address/del")
	@ResponseBody
	public AjaxResult delAddress(HttpServletRequest req, HttpServletResponse res, Long addressId) {
		int result = wapAddressService.del(addressId);
		if(result == 1) {
			this.reSetUserAddress(req.getSession());
		}
		return new AjaxResult(result, null, null);
	}
	
	@RequestMapping("/logout")
	@ResponseBody
	public AjaxResult logout(HttpServletRequest req, HttpServletResponse res) {
		clearSession(req, res);
		return new AjaxResult(1, null, null);
	}
	
	/**
	 * 查看优惠卷
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping("/findCoupon")
	public ModelAndView findCoupon(HttpServletRequest req, HttpServletResponse res){
		
		//获取userId
		Long userId = SessionInfo.get().getUserId();
		Map<String, Integer> condition=new HashMap<String, Integer>();
		Map<String,Object> resultMap = new HashMap<String,Object>();
		//1  已过期和未使用且未过期
		condition.put(SystemConstant.COUPON.STATUS, SystemConstant.COUPON_USER.STATUS_NO_USE);
		getCouponNum("expiredAndNotUse",userId,condition,resultMap);
		//2 使用
		condition.put(SystemConstant.COUPON.STATUS, SystemConstant.COUPON_USER.STATUS_USED);
		getCouponNum("used",userId,condition,resultMap);
		req.setAttribute("resultMap", resultMap);
		
		return new ModelAndView(COUPON);
	}
	
	/**
	 * 封装不同类型的优惠卷数量
	 * @param typeName
	 * @param map
	 * @param list
	 */
	private void getCouponNum(String typeName,Long userId, Map<String,Integer> condition, Map<String,Object> resultMap){
		
		ReqData reqData = new ReqData();
		List<CouponUser>  expiredLists = null;
		List<CouponUser>  notUseLists = null;
		reqData.putValue(SystemConstant.COUPON.USER_ID, userId, SystemConstant.REQ_PARAMETER_EQ);
		reqData.putValue(SystemConstant.COUPON.STATUS, condition.get(SystemConstant.COUPON.STATUS), SystemConstant.REQ_PARAMETER_EQ);
		List<CouponUser> findCoupons = couponService.findCoupons(reqData);
		if("expiredAndNotUse".equals(typeName)){
			expiredLists = new ArrayList<CouponUser>();
			notUseLists = new ArrayList<CouponUser>();
			for (CouponUser couponUser : findCoupons){
				Long couponId = couponUser.getCouponId();
				Coupon findCouponById = couponService.findCouponById(couponId);
				if(findCouponById == null)
					continue;
				int compareTo = findCouponById.getEffectiveEndTime().compareTo(new Date());
				if(compareTo<=0)
					expiredLists.add(couponUser);//已过期
				else
					notUseLists.add(couponUser);//未过期过期
			}
		}else{
			resultMap.put("used", findCoupons);
		}
		if(expiredLists != null){
			resultMap.put("expired", expiredLists);
		}
		if(notUseLists != null){
			resultMap.put("notUse", notUseLists);
		}
		
	}
	
	/**
	 * 查看优惠卷
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping("/findCouponList")
	public ModelAndView findCouponList(HttpServletRequest req, HttpServletResponse res, CouponSearchInDto couponSearchInDto){
		
		//获取userId
		Long userId = SessionInfo.get().getUserId();
		List<GetAvailbleCouponOutDto> couponList = couponService.findUserCoupon(userId, couponSearchInDto);
		req.setAttribute("couponList", couponList);
		
		return new ModelAndView(COUPON_LIST);
	}
	
	/**
	 * 绑定优惠卷
	 * @param entityCoupon
	 * @return
	 */
	@RequestMapping("/bindCoupon")
	@ResponseBody
	public RespData bindCoupon(HttpServletRequest req, HttpServletResponse res, EntityCoupon entityCoupon){
		
		RespData respData = new RespData();
		//获取userId
		Long userId = SessionInfo.get().getUserId();
		CouponUser couponUser=new CouponUser();
		couponUser.setUserId(userId);
		couponService.bindingEntityCoupon(userId, entityCoupon.getCouponCode());
		respData.setData(1);
		
		return respData;
	}
	
	/**
	 * 获取消息列表
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping("findMessage")
	public ModelAndView findMessage(HttpServletRequest req, HttpServletResponse res){
		
		Long userId = SessionInfo.get().getUserId();
		List<MsgPushInfo> massageList = userService.findMsgInfoByUser(userId);
		req.setAttribute("massageList", massageList);
		
		return new ModelAndView(MESSAGE);
	}
	
	/**
	 * 获取消息详情
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping("messageInfo")
	public ModelAndView messageInfo(HttpServletRequest req, HttpServletResponse res, Long messageId, Integer readstatus){
		
		Long userId = SessionInfo.get().getUserId();
		if(readstatus == 0){
			userService.makeMsgRead(userId, messageId) ;
		}
		MsgPushInfo message = userService.getMsgPushById(messageId);
		req.setAttribute("message", message);
		
		return new ModelAndView(MESSAGE_INFO);
	}
	
	/**
	 * 查看激活明细
	 * @param request
	 * @return
	 */
	@RequestMapping("/shoppingCard")
	public ModelAndView shoppingCard(HttpServletRequest request){
		
		//System.out.println("购物卡");
		SessionInfo sessionInfo=SessionInfo.get();
		List<ShoppingCard> activateDetail = wapShoppingCardService.activateDetail(sessionInfo.getUserId());
		request.setAttribute("activateDetail", activateDetail);
		return new ModelAndView(SHOPPING_CARD);
	}
}
