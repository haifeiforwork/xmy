package com.zfj.xmy.wap.web.controller.payment;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zfj.base.commons.mini.bean.RespData;
import com.zfj.base.exception.BusinessException;
import com.zfj.base.util.web.WebUtil;
import com.zfj.xmy.common.persistence.pojo.Order;
import com.zfj.xmy.order.service.common.PayService;
import com.zfj.xmy.order.service.pc.PcOrderService;
import com.zfj.xmy.order.service.wap.WapOrderService;
import com.zfj.xmy.pay.persistence.pojo.vo.LaunchPayGoodsVo;
import com.zfj.xmy.wap.web.common.SessionInfo;

/**
 * 支付
 * @author cj
 * @createDate 2017年11月6日
 *
 */
@Controller
@RequestMapping("/payment")
public class PaymentController {
	
	@Autowired
	private PayService payService;
	@Autowired
	private PcOrderService orderService;
	@Autowired
	private WapOrderService wapOrderService;
	
	private final static String WX_PAYMENT = "payment/wx_payment";
	
	@InitBinder
	public void dateBinder(WebDataBinder binder) {
		binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy/MM/dd aHH:mm:ss"), true));
	}
	
	@RequestMapping("/paySuccess")
	public String success(String no, String total, String pay, ModelMap model) {
		Order order = wapOrderService.findOrderByNo(no);
		model.addAttribute("no", no);
		model.addAttribute("total", order.getTotal());
		model.addAttribute("createTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(order.getCreateTime()));
		model.addAttribute("pay", order.getPay());
		return "order/paySuccess";
	}
	
	/**
	 * 支付
	 * @param request
	 * @param response
	 * @param launchPayGoodsVo
	 * @return
	 */
	@RequestMapping("/payment/{payType}")
	@ResponseBody
	public Object payment(HttpServletRequest request, HttpServletResponse response, LaunchPayGoodsVo launchPayGoodsVo,
			@PathVariable(name="payType",required=true) Integer payType){
		
		SessionInfo sessionInfo = SessionInfo.get();
		Long userId = 0L;
		
		Long orderid = Long.parseLong(launchPayGoodsVo.getOrderid());
		Order order = orderService.findOrderByOrderId(orderid);
		
		if(order != null){
			if(order.getStatus() != 1){
				throw new BusinessException("请勿重复提交订单");
			}
			if(payType == 5){
				RespData resp = new RespData();
				if(sessionInfo == null || sessionInfo.getUserId() == null){
					orderService.updateOrder(Long.valueOf(launchPayGoodsVo.getOrderid()), payType, launchPayGoodsVo.getPayAmount(), (long) 0);
				} else {
					userId =  sessionInfo.getUserId();
					orderService.updateOrder(Long.valueOf(launchPayGoodsVo.getOrderid()), payType, launchPayGoodsVo.getPayAmount(),userId);
				}
				order = orderService.findOrderByOrderId(orderid);
				resp.setData(order);
				resp.setResultCode(RespData.CODE_SUCCESS);
				return resp;
			}else{
				RespData resp = new RespData();
				if(sessionInfo == null || sessionInfo.getUserId() == null){
					if(launchPayGoodsVo.getPayAmount() != null && launchPayGoodsVo.getPayAmount().doubleValue() > 0){
						throw new BusinessException(100,"SESSION_LOST");
					}
				}else{
					userId = sessionInfo.getUserId();
				}
				String ip = WebUtil.getRealIp();
				launchPayGoodsVo.setPaytype(payType);
				launchPayGoodsVo.setClientIp(ip);
				Object returnStr = payService.beforebuyGoods(launchPayGoodsVo,userId);
				if(returnStr == null) {//只用余额支付
					resp.setData("success");
					return resp;
				}
				return returnStr;
			}
		}
		throw new BusinessException("该订单不存在");
	}
	
}
